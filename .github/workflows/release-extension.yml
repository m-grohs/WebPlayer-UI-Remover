name: Manual Extension Release

on:
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Skip tagging and GitHub release?'
        required: false
        default: 'true'

jobs:
  release-extension:
    name: Build and Release Extension
    runs-on: ubuntu-latest

    permissions:
      contents: write  # Needed to push tags & create releases

    env:
      FIREFOX_API_KEY: ${{ secrets.AMO_API_KEY }}
      FIREFOX_API_SECRET: ${{ secrets.AMO_API_SECRET }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for changelog

      - name: Set up Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Install tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq zip
          npm install --global web-ext

      - name: Copy Chrome manifest
        run: cp manifest-chrome.json manifest.json

      - name: Extract version from manifest.json
        id: version
        run: |
          VERSION=$(jq -r '.version' manifest.json)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Override version in dry run
        if: inputs.dry_run == 'true'
        run: |
          VERSION=$(jq -r '.version' manifest.json)
          FAKE_VERSION="${VERSION}-test"
          jq --arg v "$FAKE_VERSION" '.version = $v' manifest.json > manifest.json.tmp
          mv manifest.json.tmp manifest.json
          echo "OVERRIDDEN_VERSION=$FAKE_VERSION" >> $GITHUB_OUTPUT
        id: override

      - name: Use real version if not overridden
        if: inputs.dry_run != 'true'
        run: echo "OVERRIDDEN_VERSION=${{ steps.version.outputs.VERSION }}" >> $GITHUB_OUTPUT
        id: override-real

      ##########################
      # Chrome Build & Zip
      ##########################
      - name: Zip Chrome extension
        run: |
          VERSION="${{ steps.override.outputs.OVERRIDDEN_VERSION }}"
          mkdir -p build/chrome
          cp -r * build/chrome/
          cd build/chrome
          zip -r "chrome-${VERSION}.zip" ./*
          mv *.zip ../

      ##########################
      # Firefox Build & Sign
      ##########################
      - name: Copy Firefox manifest
        run: cp manifest-firefox.json manifest.json

      - name: Zip Firefox extension
        run: |
          VERSION="${{ steps.override.outputs.OVERRIDDEN_VERSION }}"
          mkdir -p build/firefox
          cp -r * build/firefox/
          cd build/firefox
          zip -r "firefox-${VERSION}.zip" ./*
          mv *.zip ../

      - name: Sign Firefox extension (skip if dry run with no API keys)
        run: |
          VERSION="${{ steps.override.outputs.OVERRIDDEN_VERSION }}"
          web-ext sign \
            --source-dir=build/firefox \
            --api-key="$FIREFOX_API_KEY" \
            --api-secret="$FIREFOX_API_SECRET" \
            --artifacts-dir=build/signed \
            --channel=listed

      ##########################
      # Git Tag (only if real)
      ##########################
      - name: Commit and tag release
        if: inputs.dry_run == 'false'
        run: |
          git add manifest.json
          git commit -m "chore: release v${{ steps.version.outputs.VERSION }}" || echo "Nothing to commit"
          git tag "v${{ steps.version.outputs.VERSION }}"
          git push origin HEAD
          git push origin "v${{ steps.version.outputs.VERSION }}"

      ##########################
      # Changelog and Contribs
      ##########################
      - name: Get last tag
        id: last_tag
        run: |
          TAG=$(git tag --sort=-creatordate | grep -v "${{ steps.override.outputs.OVERRIDDEN_VERSION }}" | head -n 1)
          echo "LAST_TAG=$TAG" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          echo "CHANGES<<EOF" >> $GITHUB_OUTPUT
          if [ -n "${{ steps.last_tag.outputs.LAST_TAG }}" ]; then
            git log ${{ steps.last_tag.outputs.LAST_TAG }}..HEAD --pretty=format:"- %s"
          else
            git log --pretty=format:"- %s"
          fi >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: List contributors
        id: contributors
        run: |
          if [ -n "${{ steps.last_tag.outputs.LAST_TAG }}" ]; then
            CONTRIBUTORS=$(git log ${{ steps.last_tag.outputs.LAST_TAG }}..HEAD --format='%aN' | sort -u | paste -sd ", " -)
          else
            CONTRIBUTORS=$(git log --format='%aN' | sort -u | paste -sd ", " -)
          fi
          echo "CONTRIBUTORS=$CONTRIBUTORS" >> $GITHUB_OUTPUT

      - name: Print release info (dry run simulation)
        run: |
          echo "üìù Simulated Release v${{ steps.override.outputs.OVERRIDDEN_VERSION }}"
          echo ""
          echo "üîÑ Changes:"
          echo "${{ steps.changelog.outputs.CHANGES }}"
          echo ""
          echo "üë• Contributors:"
          echo "${{ steps.contributors.outputs.CONTRIBUTORS }}"

      ##########################
      # Create Real GitHub Release
      ##########################
      - name: Create GitHub Release
        if: inputs.dry_run == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.VERSION }}
          name: Release v${{ steps.version.outputs.VERSION }}
          body: |
            ## Changes
            ${{ steps.changelog.outputs.CHANGES }}

            **Contributors:** ${{ steps.contributors.outputs.CONTRIBUTORS }}
          files: |
            build/*.zip
            build/signed/*.xpi

      ##########################
      # Upload artifacts (dry run)
      ##########################
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: extension-build
          path: |
            build/*.zip
            build/signed/*.xpi
