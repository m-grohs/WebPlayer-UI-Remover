name: Release Extension

on:
  workflow_dispatch:
    inputs:
      dry-run:
        description: 'Dry run (no release)'
        required: true
        type: boolean
        default: false

permissions:
  contents: write  # Required for creating releases

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for changelog

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get version
        id: version
        run: |
          VERSION=$(jq -r .version manifest-chrome.json)
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "Version detected: $VERSION"

      - name: Generate formatted changelog
        id: changelog
        run: |
          # Get latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
              
          if [ -z "$LATEST_TAG" ]; then
            LOG_RANGE=""
          else
            LOG_RANGE="${LATEST_TAG}..HEAD"
          fi
              
          # Get all commits (no merges), truncate subject to 72 chars, and format
          echo "Changes:" > formatted_changelog.txt
          echo "" >> formatted_changelog.txt
          git log $LOG_RANGE --pretty=format:"- %s (%h)" --no-merges \
            | while read -r line; do
                MSG=$(echo "$line" | sed -E 's/(.{72}).*/\1.../')
                echo "$MSG"
              done >> formatted_changelog.txt
              
          # Output for GitHub
          echo "changes<<EOF" >> $GITHUB_OUTPUT
          cat formatted_changelog.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT


      - name: Create build directory
        run: mkdir -p build

      - name: Build Chrome extension
        run: |
          cp manifest-chrome.json manifest.json
          zip -r "build/ZenStream-Chrome-v${{ steps.version.outputs.version }}${{ inputs.dry-run && '-temp' || '' }}.zip" \
            * -x "manifest-chrome.json" "manifest-firefox.json" "build/*" ".git*" ".github/*"

      - name: Build Firefox extension
        run: |
          cp manifest-firefox.json manifest.json
          zip -r "build/ZenStream-Firefox-v${{ steps.version.outputs.version }}${{ inputs.dry-run && '-temp' || '' }}.zip" \
            * -x "manifest-chrome.json" "manifest-firefox.json" "build/*" ".git*" ".github/*"

      - name: Prepare for signing
        run: |
          mkdir -p web-ext-artifacts
          mkdir -p build

      # Add a step to create a unique version suffix for dry runs
      - name: Generate version suffix
        if: ${{ inputs.dry-run }}
        id: version_suffix
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          echo "suffix=-build.$TIMESTAMP" >> "$GITHUB_OUTPUT"
          # Update manifest with new version
          VERSION=$(jq -r .version manifest-firefox.json)
          NEW_VERSION="${VERSION}-build.${TIMESTAMP}"
          cp manifest-firefox.json manifest.json
          jq --arg version "$NEW_VERSION" '.version = $version' manifest.json > temp.json && mv temp.json manifest.json
          echo "Using version: $NEW_VERSION"

      - name: Sign Firefox extension with web-ext
        uses: kewisch/action-web-ext@v1
        with:
          cmd: sign
          source: "build/ZenStream-Firefox-v${{ steps.version.outputs.version }}${{ inputs.dry-run && '-temp' || '' }}.zip"
          channel: listed
          apiKey: ${{ secrets.AMO_API_KEY }}
          apiSecret: ${{ secrets.AMO_API_SECRET }}
          artifacts: web-ext-artifacts

      - name: Move signed extension
        run: |
          # Find the .xpi file and move it with the correct name
          XPI_FILE=$(find web-ext-artifacts -name "*.xpi" -type f)
          if [ -n "$XPI_FILE" ]; then
            mv "$XPI_FILE" "build/ZenStream-Firefox-v${{ steps.version.outputs.version }}${{ inputs.dry-run && '-temp' || '' }}.xpi"
          else
            echo "No .xpi file found in web-ext-artifacts directory"
            exit 1
          fi

      - name: Create Release
        if: ${{ !inputs.dry-run }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          files: |
            build/ZenStream-Chrome-v${{ steps.version.outputs.version }}.zip
            build/ZenStream-Firefox-v${{ steps.version.outputs.version }}.zip
            build/ZenStream-Firefox-v${{ steps.version.outputs.version }}.xpi
          draft: false
          prerelease: false